### Field : notify_on_delete()
```lua
local target 	-- Example target entity
local observer 	-- Example observing entity
function onDelete( tar, obs )
	print( "Observer saw Target die." )
end

field:notify_on_delete( target, observer, function( t, e ) print( "Observer saw Target die." ) end )
field:notify_on_delete( target, observer, onDelete )
```
> The above snippet sets up a notification callback in two separate ways.<br>
> You can use it in either way with little differences, except when wanting to use more advanced techniques.

This function sets up a **`callback function`** that will be executed when the `target` <%= @link_entity %> is destroyed.<br>
If the `observer` <%= @link_entity %> is destroyed *first*, the **`function`** will *not* execute.

This can be used in many cases e.g. where a _parent_ (`target`) <%= @link_entity %> wants another <%= @link_entity %> it spawns (as `observer`) to be deleted along with it.

#### Function Call
`field:notify_on_delete( targetID, observerID, callback_function )`

#### Return Value
**`NotifyID_t`** - ???

#### Parameters
**`number`** `targetID`<br>
	&emsp;_The **unique ID** of the <%= @link_entity %> you are watching._<br>
**`number`** `observerID`<br>
	&emsp;_The **unique ID** of the <%= @link_entity %> that will be notified when an <%= @link_entity %> with the ID `targetID` is deleted._<br>
**`function`** `callback_function`<br>
	&emsp;_This is the **`function`** that will be called when an <%= @link_entity %> with the ID `targetID` is deleted._<br>

```lua
function callback_function( target, observer )
	print( "Target died." )
end
```
<aside class="notice"><code>callback_function</code> requrires <b>two</b> <%= @link_entity %> parameters, and to <b>no value</b>.<br>
The <code>target</code> parameter is the <%= @link_entity %> that was deleted.<br>
The <code>observer</code> parameter is the <%= @link_entity %> that will be notified of the other was deleted.<br>
See the code snippet for an example.</aside>
