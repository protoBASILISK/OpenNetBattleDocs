### Field : callback_on_delete()
```lua
local target 	-- Example target entity
function onDelete( tar )
	print( "Target died." )
end

field:callback_on_delete( target, observer, function( t ) print( "Target died." ) end )
field:callback_on_delete( target, observer, onDelete )
```
> The above snippet sets up a callback in two separate ways.<br>
> You can use it in either way with little differences, except when wanting to use more advanced techniques.

This function sets up a *callback function* that will be executed when the **`target`** <%= @link_entity %> is destroyed.<br>

#### Function Call
`field:notify_on_delete( targetID, callback_function )`

#### Return Value
**`NotifyID_t`** - ???

#### Parameters
**`number`** `targetID` - The *unique ID* of the <%= @link_entity %> you are watching.<br>
**`function`** `callback_function` - This is the **`function`** that will be called when an <%= @link_entity %> with the ID `targetID` is deleted.

```lua
function callback_function( target )
	print( "Target died." )
end
```
<aside class="notice"><code>callback_function</code> requires <b>one</b> <%= @link_entity %> parameter, and to return <b>no value</b>.<br>
See the code snippet for an example.</aside>
