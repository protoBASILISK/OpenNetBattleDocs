### <%= @class_header %> : slide()

```lua

local <%= @variable_text %> 	;-- example <%= @variable_text %> 
local dest_tile 	-- tile they want to move to
local move_time = frames( 60 )
local endlag_frames = frames( 20 )

local function on_begin_func()
	print( "Started sliding." )
end

local can_slide = <%= @variable_text %>:slide( dest_tile, move_time, endlag_frames, ActionOrder.Voluntary, on_begin_func )
```

> The above snippet will make the <%= @class_name %> spend 60 frames (1 second) sliding to the destination tile, and wait for 20 frames (1/3 second) before it can act again.

This function causes the <%= @class_name %> to move to a target <%= @link_tile %> by sliding along the ground to it.<br>

This function returns `true` if the movement was possible *at the time it was called*, otherwise it returns `false`.

#### Function Call
`<%= @variable_text %>:slide( destination, time, endlag_frames, order, on_begin_func )`

#### Return Value
**`boolean`**

#### Parameters
<%= @link_tile %> `destination`<br>
	&emsp;_A pointer to the <%= @link_tile %> that you want the <%= @class_name %> to move to._<br>
**`frame_time_t`** `time`<br>
	&emsp;_The *amount of time* you want the movement to take._<br>
**`frame_time_t`** `endlag_frames`<br>
	&emsp;_The *amount of time* **after** the movement you want the <%= @class_name %> to stop acting for._<br>
<%= @link_action_order %> `order`<br>
	&emsp;_??? idk actionorder lol TODO fix this_<br>
**`function`** `on_begin_func`<br>
	&emsp;_`nil`, or a **`function`** that you want to execute **when the movement starts**._<br>
<%= partial "includes/partial/use_frames_function.md.erb" %>
<%= partial "includes/entity/functions/partial/on_begin_use.md.erb" %>
