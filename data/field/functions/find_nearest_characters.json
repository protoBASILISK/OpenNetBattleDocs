{
	"version": "2.0",
	"name": "find_nearest_characters",
	"example_code": 
	[
		"local <%= variable_text %>\t-- example <%= doc_class_name %>",
		"",
		"\t-- first method",
		"local blue_team_filter = function( character )",
		"\treturn character:get_team() == Team.Blue",
		"end",
		"\t-- second method",
		"local all_blue_characters = <%= variable_text %>:find_nearest_characters( blue_team_filter )",
		"",
		"\t-- second method",
		"local all_red_characters",
		"\t= <%= variable_text %>:find_nearest_characters( function( character ) return character:get_team() == Team.Red end )"
	],
	"example_comment": "The above snippet shows two ways of passing a function to `find_nearest_characters()`.",
    "summary": "",
    "description": [
		"Iterates through all of the <%= type 'Character' %>s, and returns a list of the closest valid <%= type 'Character' %>s to a specified <%= type 'Character' %>.",
		"&emsp;To *include* a <%= type 'Character' %> in the final list, the filter `function` has to return `true`.",
		"&emsp;If it returns `false` for a <%= type 'Character' %>, it will *not* be included."
	],
	"parameters": [
		{
			"name": "pivot_character",
			"desc": "The <%= type 'Character' %> to start searching from.",
			"type": "<%= type 'Entity' %>"
		},
		{
			"name": "search_function",
			"desc": "A filter function that determines if the <%= type 'Character' %> gets added to the list.",
			"type": "function"
		}
	],
	"return_value_type": "list&lt;<%= type 'Character' %>&gt;",
	"return_value_desc": "",
	"footnotes":
	[
		{
			"type": "notice",
			"text": 
			[ 
				"Even if a <%= type 'Character' %> is nearer to the `pivot_character` than others, unless it meets the `search_function` requirements, it will be ignored."
			]
		},
		{
			"type": "notice",
			"text": 
			[
				"The distance between <%= type 'Tile' %>s (and by extension, <%= type 'Character' %>s), is measured using the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry).</a>."
			]
		},
		{
			"type": "notice",
			"text":
			[
				"`search_function` requires **one** <%= type 'Character' %> parameter, and to return a `boolean`.",
				"Return `true` for any <%= type 'Character' %> that you *do* want to include.",
				"Return `false` for any <%= type 'Character' %> that you *do not* want to include.",
				"_The function does **not** have to be named `search_function`, it is just for illustrative purposes._"
			],
			"code": 
			[
				"function search_function( character )",
				"\treturn character:get_team() == Team.Red",
				"end"
			],
			"comment": "When used with the above snippet, `find_characters()` returns all <%= type 'Character' %>s that are currently on the Red team."
		}
	]
}