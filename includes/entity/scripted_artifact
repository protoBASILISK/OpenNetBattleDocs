<p><h3 id='artifact-get_id'>Artifact : get_id()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">artifact_id</span> <span class="o">=</span> <span class="n">artifact</span><span class="p">:</span><span class="n">get_id</span><span class="p">()</span>
</code></pre></div>
<p>Returns the <strong>unique ID</strong> for this <b><code>Artifact</code></b>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:get_id()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>number</code></strong></p>

<aside class="notice"><i>Nothing</i> will share an ID with another <b><code>Entity</code></b>, or any object derived from <b><code>Entity</code></b>.</aside>

<aside class="warning">If you are storing any reference to an <b><code>Entity</code></b> for multiple frames, use this to store a reference to their ID instead.<br>
Use <code>Field:get_entity()</code> to retrieve a <b><code>pointer</code></b> to the <b><code>Entity</code></b>, or <code>nil</code> if they were deleted.<br>
Using a <b><code>pointer</code></b> to a deleted <b><code>Entity</code></b> <b>will</b> cause an error and crash the game.</aside>
</p>

<p><h3 id='artifact-get_tile'>Artifact : get_tile()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">tile_in_front</span> <span class="o">=</span>   <span class="n">artifact</span><span class="p">:</span><span class="n">get_tile</span><span class="p">(</span> <span class="n">artifact</span><span class="p">:</span><span class="n">get_facing</span><span class="p">(),</span> <span class="mi">1</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet returns a <strong>pointer</strong> to the <strong>Tile</strong> in front of the example <b><code>Artifact</code></b>.</p>
</blockquote>

<p>Returns a <strong><code>pointer</code></strong> to a  offset in one direction from this <b><code>Artifact</code></b>.</p>

<p>If this offset goes out of the bounds of the battlefield, or is to an otherwise invalid , it returns <code>nil</code> instead.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:get_tile( offset_direction, offset_distance )</code></p>
<h4 id='return-value'>Return Value</h4><h4 id='parameters'>Parameters</h4>
<p><code>offset_direction</code><br>
    &emsp;<em>The direction you want to retrieve the  from.</em><br>
<strong><code>distance</code></strong> <code>offset_distance</code><br>
    &emsp;<em>The number of spaces <b>(min: 0)</b> in that direction you want to retrieve the  from.</em></p>
</p>

<p><h3 id='artifact-get_current_tile'>Artifact : get_current_tile()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">artifact_location</span> <span class="o">=</span>   <span class="n">artifact</span><span class="p">:</span><span class="n">get_current_tile</span><span class="p">()</span>
</code></pre></div>
<p>Returns a <strong><code>pointer</code></strong> to the  that an <b><code>Artifact</code></b> is standing on.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:get_current_tile()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='artifact-get_field'>Artifact : get_field()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- artifact entity</span>
<span class="kd">local</span> <span class="n">field</span> <span class="o">=</span>   <span class="n">artifact</span><span class="p">:</span><span class="n">get_field</span><span class="p">()</span>
</code></pre></div>
<p>Returns a <strong><code>pointer</code></strong> to the  that this battle is taking place on.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:get_field()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='artifact-get_facing'>Artifact : get_facing()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">artifact_facing</span> <span class="o">=</span>     <span class="n">artifact</span><span class="p">:</span><span class="n">get_facing</span><span class="p">()</span>
</code></pre></div>
<p>Returns the  that this <b><code>Artifact</code></b> is facing.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:get_facing()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='artifact-is_sliding'>Artifact : is_sliding()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">is_artifact_sliding</span> <span class="o">=</span>     <span class="p">;</span><span class="n">artifact</span><span class="p">:</span><span class="n">is_sliding</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>Artifact</code></b> is currently <em>sliding</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:is_sliding()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='artifact-get_alpha'>Artifact : get_alpha()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-sprite'>Artifact : sprite()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-is_jumping'>Artifact : is_jumping()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">is_artifact_jumping</span> <span class="o">=</span>     <span class="p">;</span><span class="n">artifact</span><span class="p">:</span><span class="n">is_jumping</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>Artifact</code></b> is currently <em>jumping</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>example:is_jumping()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='artifact-set_alpha'>Artifact : set_alpha()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-is_teleporting'>Artifact : is_teleporting()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">is_artifact_teleporting</span> <span class="o">=</span>     <span class="p">;</span><span class="n">artifact</span><span class="p">:</span><span class="n">is_teleporting</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>Artifact</code></b> is currently <em>teleporting</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:is_teleporting()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='artifact-get_color'>Artifact : get_color()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-is_moving'>Artifact : is_moving()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">is_artifact_moving</span> <span class="o">=</span>      <span class="n">artifact</span><span class="p">:</span><span class="n">is_moving</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>Artifact</code></b> is currently <em>moving around in any way</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:is_moving()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='artifact-set_color'>Artifact : set_color()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-is_deleted'>Artifact : is_deleted()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">will_remove</span> <span class="o">=</span>     <span class="p">;</span><span class="n">artifact</span><span class="p">:</span><span class="n">is_deleted</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>Artifact</code></b> has been deleted this frame.<br>
Returns <code>true</code> if they will be deleted, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:is_deleted()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='artifact-slide'>Artifact : slide()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code>
<span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact </span>
<span class="kd">local</span> <span class="n">dest_tile</span>     <span class="c1">-- tile they want to move to</span>
<span class="kd">local</span> <span class="n">move_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
<span class="kd">local</span> <span class="n">endlag_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">20</span> <span class="p">)</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">can_slide</span> <span class="o">=</span> <span class="n">artifact</span><span class="p">:</span><span class="n">slide</span><span class="p">(</span> <span class="n">dest_tile</span><span class="p">,</span> <span class="n">move_time</span><span class="p">,</span> <span class="n">endlag_frames</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span><span class="p">,</span> <span class="n">on_begin_func</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet will make the <b><code>Artifact</code></b> spend 60 frames (1 second) sliding to the destination tile, and wait for 20 frames (1/3 second) before it can act again.</p>
</blockquote>

<p>This function causes the <b><code>Artifact</code></b> to move to a target  by sliding along the ground to it.<br></p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:slide( destination, time, endlag_frames, order, on_begin_func )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>destination</code><br>
    &emsp;<em>A pointer to the  that you want the <b><code>Artifact</code></b> to move to.</em><br>
<strong><code>frame_time_t</code></strong> <code>time</code><br>
    &emsp;<em>The <em>amount of time</em> you want the movement to take.</em><br>
<strong><code>frame_time_t</code></strong> <code>endlag_frames</code><br>
    &emsp;<em>The <em>amount of time</em> <strong>after</strong> the movement you want the <b><code>Artifact</code></b> to stop acting for.</em><br>
 <code>order</code><br>
    &emsp;<em>??? idk actionorder lol TODO fix this</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong>.</em><br>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">frame_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
</code></pre></div>
<aside class="notice">Use the <code>frames()</code> function to create a <b><code>frame_time_t</code></b> object for measurements of time.<br>Passing in a regular <b><code>number</code></b> or <b><code>integer</code></b> will cause an error.</aside></p>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside>
</p>

<p><h3 id='artifact-jump'>Artifact : jump()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact </span>
<span class="kd">local</span> <span class="n">dest_tile</span>     <span class="c1">-- tile they want to move to</span>
<span class="kd">local</span> <span class="n">move_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
<span class="kd">local</span> <span class="n">endlag_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">20</span> <span class="p">)</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started jumping."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">can_jump</span> <span class="o">=</span> <span class="n">artifact</span><span class="p">:</span><span class="n">jump</span><span class="p">(</span> <span class="n">dest_tile</span><span class="p">,</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">move_time</span><span class="p">,</span> <span class="n">endlag_frames</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span><span class="p">,</span> <span class="n">on_begin_func</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet will make the <b><code>Artifact</code></b> jump for 60 frames (1 second) towards the destination tile, and wait for 20 frames (1/3 second) before it can act again.</p>
</blockquote>

<p>This function causes the <b><code>Artifact</code></b> to move to a target  by jumping to it.<br>
TODO: Test to see if they jump over hitboxes, they probably do but need to check it out.</p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:jump( destination, height, time, endlag_frames, order, on_begin_func )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>destination</code><br>
    &emsp;<em>The  that you want the <b><code>Artifact</code></b> to move to.</em><br>
<strong><code>number</code></strong> <code>height</code><br>
    &emsp;<em>The height <em>(TODO units?)</em> that you want them to reach at the apex of their jump.</em><br>
<strong><code>frame_time_t</code></strong> <code>time</code><br>
    &emsp;<em>The <em>amount of time</em> you want the movement to take.</em><br>
<strong><code>frame_time_t</code></strong> <code>endlag_frames</code><br>
    &emsp;<em>The <em>amount of time</em> <strong>after</strong> the movement you want the <b><code>Artifact</code></b> to stop acting for.</em><br>
 <code>order</code><br>
    &emsp;<em>TODO figure out how ActionOrders work again</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong></em>.</p>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">frame_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
</code></pre></div>

<aside class="notice">Use the <code>frames()</code> function to create a <b><code>frame_time_t</code></b> object for measurements of time.<br>Passing in a regular <b><code>number</code></b> or <b><code>integer</code></b> will cause an error.</aside>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside>
</p>

<p><h3 id='artifact-teleport'>Artifact : teleport()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact </span>
<span class="kd">local</span> <span class="n">dest_tile</span>     <span class="c1">-- tile they want to move to</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started teleporting."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">can_tp</span> <span class="o">=</span> <span class="n">artifact</span><span class="p">:</span><span class="n">teleport</span><span class="p">(</span> <span class="n">dest_tile</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span><span class="p">,</span> <span class="n">on_begin_func</span> <span class="p">)</span>
</code></pre></div>
<p>This function causes the <b><code>Artifact</code></b> to move to a target  by teleporting to it.<br></p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:teleport( destination, order, on_begin_func )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>destination</code><br>
    &emsp;<em>The  that you want the <b><code>Artifact</code></b> to move to.</em><br>
 <code>order</code><br>
    &emsp;<em>TODO figure out how ActionOrders work again</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong>.</em><br>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">&quot;Started sliding.&quot;</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside></p>
</p>

<p><h3 id='artifact-hide'>Artifact : hide()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-reveal'>Artifact : reveal()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-raw_move_event'>Artifact : raw_move_event()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">destination</span>   <span class="c1">-- tile they want to move to</span>

<span class="kd">local</span> <span class="n">move_event</span>    <span class="o">=</span> <span class="n">create_move_event</span><span class="p">()</span>   <span class="c1">-- use this to create a raw move event</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started jumping."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">move_event</span><span class="p">.</span><span class="n">delay_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">30</span> <span class="p">)</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">delta_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">endlag_frames_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">20</span> <span class="p">)</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">dest_tile</span> <span class="o">=</span> <span class="n">destination</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">on_begin_func</span> <span class="o">=</span> <span class="n">on_begin_func</span>

<span class="kd">local</span> <span class="n">can_move</span> <span class="o">=</span> <span class="n">artifact</span><span class="p">:</span><span class="n">raw_move_event</span><span class="p">(</span> <span class="n">move_event</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet will make the <b><code>Artifact</code></b> wait for 30 frames (1/2 second), spend 60 frames (1 second) sliding to the destination tile, and wait for 20 frames (1/3 second) before it can act again.</p>
</blockquote>

<p>This function causes the <b><code>Artifact</code></b> to move to a target  in a programmable manner.<br></p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:raw_move_event( move_event, order )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>move_event</code><br>
    &emsp;<em>The  object defining how the <b><code>Artifact</code></b> will move.</em><br>
 <code>order</code><br>
    &emsp;<em>TODO figure out how ActionOrders work again<br></em><br></p>
<h4 id='moveevent-structure'>MoveEvent structure</h4>
<p><strong><code>frame_time_t</code></strong> <code>delay_frames</code><br>
    &emsp;<em>The amount of time you want the <b><code>Artifact</code></b> to wait <strong>before</strong> starting the movement.</em><br>
<strong><code>frame_time_t</code></strong> <code>delta_frames</code><br>
    &emsp;<em>The <em>amount of time</em> you want the movement to take.</em><br>
<strong><code>frame_time_t</code></strong> <code>endlag_frames_frames</code><br>
    &emsp;<em>The <em>amount of time</em> <strong>after</strong> the movement you want the <b><code>Artifact</code></b> to stop acting for.</em><br>
<strong><code>number</code></strong> <code>height</code><br>
    &emsp;<em>The height <em>(TODO units?)</em> that you want them to reach at the apex of their jump.</em><br>
 <code>dest_tile</code><br>
    &emsp;<em>The  that you want the <b><code>Artifact</code></b> to move to.</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong>.</em><br>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">frame_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
</code></pre></div>
<aside class="notice">Use the <code>frames()</code> function to create a <b><code>frame_time_t</code></b> object for measurements of time.<br>Passing in a regular <b><code>number</code></b> or <b><code>integer</code></b> will cause an error.</aside></p>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside>
</p>

<p><h3 id='artifact-will_remove_eof'>Artifact : will_remove_eof()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">will_remove</span> <span class="o">=</span>     <span class="p">;</span><span class="n">artifact</span><span class="p">:</span><span class="n">will_remove_eof</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>Artifact</code></b> will be removed at the end of the frame.<br>
Returns <code>true</code> if they will be deleted, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:will_remove_eof()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='artifact-get_team'>Artifact : get_team()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">artifact_team</span> <span class="o">=</span>   <span class="p">;</span><span class="n">artifact</span><span class="p">:</span><span class="n">get_team</span><span class="p">()</span>
</code></pre></div>
<p>Returns the  that this <b><code>Artifact</code></b> is a member of.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:get_team()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='artifact-get_texture'>Artifact : get_texture()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-set_texture'>Artifact : set_texture()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-set_height'>Artifact : set_height()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-get_animation'>Artifact : get_animation()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-set_position'>Artifact : set_position()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-remove'>Artifact : remove()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="n">artifact</span><span class="p">:</span><span class="n">remove</span><span class="p">()</span>
</code></pre></div>
<p>Flags this <b><code>Artifact</code></b> to be removed at the end of the frame.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:remove()</code></p>
</p>

<p><h3 id='artifact-delete'>Artifact : delete()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="n">artifact</span><span class="p">:</span><span class="n">delete</span><span class="p">()</span>
</code></pre></div>
<p>Immediately marks this <b><code>Artifact</code></b> as deleted, and calls its <code>delete_func</code> function (if any was defined).</p>
<h4 id='function-call'>Function Call</h4>
<p><code>artifact:delete()</code></p>
</p>

<p><h3 id='artifact-update_func'>Artifact . update_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="n">number_prints</span> <span class="o">=</span> <span class="mi">0</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_update</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">time</span> <span class="p">)</span>
  <span class="n">number_prints</span> <span class="o">=</span> <span class="n">number_prints</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="nb">print</span><span class="p">(</span> <span class="n">number_prints</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">artifact</span><span class="p">.</span><span class="n">update_func</span> <span class="o">=</span> <span class="n">on_update</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed every frame that this <b><code>Artifact</code></b> is alive for.</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>artifact.update_func = on_update</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_update</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>Artifact</code></b> to execute every frame.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">update_func</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">elapsed_time</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>update_func</code> requires <b>one</b> <b><code>Artifact</code></b> parameter, <b>one</b> <b><code>number</code></b> parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.<br>
The <code>number</code> parameter is the <i>elapsed time</i> since the last time <code>update_func</code> was called for this <b><code>Artifact</code></b>.</aside>
</p>

<p><h3 id='artifact-set_animation'>Artifact : set_animation()</h3>
<p>TODO</p>
</p>

<p><h3 id='artifact-delete_func'>Artifact . delete_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_delete</span><span class="p">(</span> <span class="n">self</span> <span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span> <span class="s2">"I've been deleted!"</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">artifact</span><span class="p">.</span><span class="n">delete_func</span> <span class="o">=</span> <span class="n">on_delete</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>Artifact</code></b> is deleted.</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>artifact.delete_func = on_delete</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_delete</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>Artifact</code></b> to execute when it is deleted.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">delete_func</span><span class="p">(</span> <span class="n">self</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>delete_func</code> requires <b>one</b> <b><code>Artifact</code></b> parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.</aside>
</p>

<p><h3 id='artifact-can_move_to_func'>Artifact . can_move_to_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">move_check</span><span class="p">()</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">self</span><span class="p">:</span><span class="n">get_team</span><span class="p">()</span> <span class="o">==</span> <span class="n">tile</span><span class="p">:</span><span class="n">get_team</span><span class="p">()</span> <span class="p">)</span>
    <span class="k">return</span> <span class="kc">true</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="kc">false</span>
<span class="k">end</span>

<span class="n">artifact</span><span class="p">.</span><span class="n">can_move_to_func</span> <span class="o">=</span> <span class="n">move_check</span>
</code></pre></div>
<blockquote>
<p>The above function allows the <b><code>Artifact</code></b> to move onto any  that is owned by its .</p>
</blockquote>

<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>Artifact</code></b> attempts to move to another .</p>

<p>If the <strong><code>function</code></strong> returns <code>true</code> for a target , the <b><code>Artifact</code></b> is able to move to the .<br>
Otherwise, the <b><code>Artifact</code></b> is <em>not</em> able to move onto that .</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>artifact.can_move_to_func = move_check</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>move_check</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>Artifact</code></b> to execute when trying to move.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">can_move_to_func</span><span class="p">(</span> <span class="n">tile</span> <span class="p">)</span>
  <span class="k">return</span> <span class="kc">true</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>can_move_to_func</code> requires <b>one</b> <b><code>Artifact</code></b> parameter, and to return a <b><code>boolean</code></b>.<br>
The <code>tile</code> parameter will be passed a reference to the  it is trying to move to.</aside>
</p>

<p><h3 id='artifact-on_spawn_func'>Artifact . on_spawn_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_spawn</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">spawn_tile</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">artifact</span><span class="p">.</span><span class="n">on_spawn_func</span> <span class="o">=</span> <span class="n">on_spawn</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>Artifact</code></b> is spawned into the game field.</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>artifact.on_spawn_func = on_spawn</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_spawn</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>Artifact</code></b> to execute when it is first spawned.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">on_spawn_func</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">spawn_tile</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>on_spawn_func</code> requires <b>one</b> <b><code>Artifact</code></b> parameter, <b>one</b>  parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.<br>
The <code>spawn_tile</code> parameter will be passed a reference to the  it spawns on.</aside>
</p>

<p><h3 id='artifact-never_flip'>Artifact : never_flip()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">artifact</span>  <span class="p">;</span><span class="c1">-- example artifact</span>
<span class="n">artifact</span><span class="p">:</span><span class="n">never_flip</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span>
</code></pre></div><h4 id='function-call'>Function Call</h4>
<p><code>artifact:never_flip( should_never_flip )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>boolean</code></strong> <code>should_never_flip</code><br>
    &emsp;<em><code>true</code> if you want this <b><code>Artifact</code></b> to always face the same direction. Otherwise, <code>false</code>.</em></p>
</p>
