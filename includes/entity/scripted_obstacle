<p><h3 id='scriptedobstacle-get_id'>ScriptedObstacle : get_id()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_id</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_id</span><span class="p">()</span>
</code></pre></div>
<p>Returns the <strong>unique ID</strong> for this <b><code>ScriptedObstacle</code></b>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_id()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>number</code></strong></p>

<aside class="notice"><i>Nothing</i> will share an ID with another <b><code>Entity</code></b>, or any object derived from <b><code>Entity</code></b>.</aside>

<aside class="warning">If you are storing any reference to an <b><code>Entity</code></b> for multiple frames, use this to store a reference to their ID instead.<br>
Use <code>Field:get_entity()</code> to retrieve a <b><code>pointer</code></b> to the <b><code>Entity</code></b>, or <code>nil</code> if they were deleted.<br>
Using a <b><code>pointer</code></b> to a deleted <b><code>Entity</code></b> <b>will</b> cause an error and crash the game.</aside>
</p>

<p><h3 id='scriptedobstacle-get_tile'>ScriptedObstacle : get_tile()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">tile_in_front</span> <span class="o">=</span>   <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_tile</span><span class="p">(</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_facing</span><span class="p">(),</span> <span class="mi">1</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet returns a <strong>pointer</strong> to the <strong>Tile</strong> in front of the example <b><code>ScriptedObstacle</code></b>.</p>
</blockquote>

<p>Returns a <strong><code>pointer</code></strong> to a  offset in one direction from this <b><code>ScriptedObstacle</code></b>.</p>

<p>If this offset goes out of the bounds of the battlefield, or is to an otherwise invalid , it returns <code>nil</code> instead.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_tile( offset_direction, offset_distance )</code></p>
<h4 id='return-value'>Return Value</h4><h4 id='parameters'>Parameters</h4>
<p><code>offset_direction</code><br>
    &emsp;<em>The direction you want to retrieve the  from.</em><br>
<strong><code>distance</code></strong> <code>offset_distance</code><br>
    &emsp;<em>The number of spaces <b>(min: 0)</b> in that direction you want to retrieve the  from.</em></p>
</p>

<p><h3 id='scriptedobstacle-get_current_tile'>ScriptedObstacle : get_current_tile()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_location</span> <span class="o">=</span>  <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_current_tile</span><span class="p">()</span>
</code></pre></div>
<p>Returns a <strong><code>pointer</code></strong> to the  that an <b><code>ScriptedObstacle</code></b> is standing on.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_current_tile()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='scriptedobstacle-get_field'>ScriptedObstacle : get_field()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- scripted_obstacle entity</span>
<span class="kd">local</span> <span class="n">field</span> <span class="o">=</span>   <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_field</span><span class="p">()</span>
</code></pre></div>
<p>Returns a <strong><code>pointer</code></strong> to the  that this battle is taking place on.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_field()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='scriptedobstacle-get_facing'>ScriptedObstacle : get_facing()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_facing</span> <span class="o">=</span>    <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_facing</span><span class="p">()</span>
</code></pre></div>
<p>Returns the  that this <b><code>ScriptedObstacle</code></b> is facing.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_facing()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='scriptedobstacle-is_sliding'>ScriptedObstacle : is_sliding()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">is_scripted_obstacle_sliding</span> <span class="o">=</span>    <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_sliding</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> is currently <em>sliding</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:is_sliding()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-get_alpha'>ScriptedObstacle : get_alpha()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-sprite'>ScriptedObstacle : sprite()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-is_jumping'>ScriptedObstacle : is_jumping()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">is_scripted_obstacle_jumping</span> <span class="o">=</span>    <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_jumping</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> is currently <em>jumping</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>example:is_jumping()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-set_alpha'>ScriptedObstacle : set_alpha()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-is_teleporting'>ScriptedObstacle : is_teleporting()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">is_scripted_obstacle_teleporting</span> <span class="o">=</span>    <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_teleporting</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> is currently <em>teleporting</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:is_teleporting()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-get_color'>ScriptedObstacle : get_color()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-is_moving'>ScriptedObstacle : is_moving()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">is_scripted_obstacle_moving</span> <span class="o">=</span>     <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_moving</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> is currently <em>moving around in any way</em>.<br>
Returns <code>true</code> if they are, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:is_moving()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-set_color'>ScriptedObstacle : set_color()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-is_deleted'>ScriptedObstacle : is_deleted()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">will_remove</span> <span class="o">=</span>     <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_deleted</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> has been deleted this frame.<br>
Returns <code>true</code> if they will be deleted, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:is_deleted()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-slide'>ScriptedObstacle : slide()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code>
<span class="kd">local</span> <span class="n">scripted_obstacle</span>     <span class="p">;</span><span class="c1">-- example scripted_obstacle </span>
<span class="kd">local</span> <span class="n">dest_tile</span>     <span class="c1">-- tile they want to move to</span>
<span class="kd">local</span> <span class="n">move_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
<span class="kd">local</span> <span class="n">endlag_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">20</span> <span class="p">)</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">can_slide</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">slide</span><span class="p">(</span> <span class="n">dest_tile</span><span class="p">,</span> <span class="n">move_time</span><span class="p">,</span> <span class="n">endlag_frames</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span><span class="p">,</span> <span class="n">on_begin_func</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet will make the <b><code>ScriptedObstacle</code></b> spend 60 frames (1 second) sliding to the destination tile, and wait for 20 frames (1/3 second) before it can act again.</p>
</blockquote>

<p>This function causes the <b><code>ScriptedObstacle</code></b> to move to a target  by sliding along the ground to it.<br></p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:slide( destination, time, endlag_frames, order, on_begin_func )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>destination</code><br>
    &emsp;<em>A pointer to the  that you want the <b><code>ScriptedObstacle</code></b> to move to.</em><br>
<strong><code>frame_time_t</code></strong> <code>time</code><br>
    &emsp;<em>The <em>amount of time</em> you want the movement to take.</em><br>
<strong><code>frame_time_t</code></strong> <code>endlag_frames</code><br>
    &emsp;<em>The <em>amount of time</em> <strong>after</strong> the movement you want the <b><code>ScriptedObstacle</code></b> to stop acting for.</em><br>
 <code>order</code><br>
    &emsp;<em>??? idk actionorder lol TODO fix this</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong>.</em><br>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">frame_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
</code></pre></div>
<aside class="notice">Use the <code>frames()</code> function to create a <b><code>frame_time_t</code></b> object for measurements of time.<br>Passing in a regular <b><code>number</code></b> or <b><code>integer</code></b> will cause an error.</aside></p>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside>
</p>

<p><h3 id='scriptedobstacle-jump'>ScriptedObstacle : jump()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span>     <span class="p">;</span><span class="c1">-- example scripted_obstacle </span>
<span class="kd">local</span> <span class="n">dest_tile</span>     <span class="c1">-- tile they want to move to</span>
<span class="kd">local</span> <span class="n">move_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
<span class="kd">local</span> <span class="n">endlag_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">20</span> <span class="p">)</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started jumping."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">can_jump</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">jump</span><span class="p">(</span> <span class="n">dest_tile</span><span class="p">,</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">move_time</span><span class="p">,</span> <span class="n">endlag_frames</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span><span class="p">,</span> <span class="n">on_begin_func</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet will make the <b><code>ScriptedObstacle</code></b> jump for 60 frames (1 second) towards the destination tile, and wait for 20 frames (1/3 second) before it can act again.</p>
</blockquote>

<p>This function causes the <b><code>ScriptedObstacle</code></b> to move to a target  by jumping to it.<br>
TODO: Test to see if they jump over hitboxes, they probably do but need to check it out.</p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:jump( destination, height, time, endlag_frames, order, on_begin_func )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>destination</code><br>
    &emsp;<em>The  that you want the <b><code>ScriptedObstacle</code></b> to move to.</em><br>
<strong><code>number</code></strong> <code>height</code><br>
    &emsp;<em>The height <em>(TODO units?)</em> that you want them to reach at the apex of their jump.</em><br>
<strong><code>frame_time_t</code></strong> <code>time</code><br>
    &emsp;<em>The <em>amount of time</em> you want the movement to take.</em><br>
<strong><code>frame_time_t</code></strong> <code>endlag_frames</code><br>
    &emsp;<em>The <em>amount of time</em> <strong>after</strong> the movement you want the <b><code>ScriptedObstacle</code></b> to stop acting for.</em><br>
 <code>order</code><br>
    &emsp;<em>TODO figure out how ActionOrders work again</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong></em>.</p>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">frame_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
</code></pre></div>

<aside class="notice">Use the <code>frames()</code> function to create a <b><code>frame_time_t</code></b> object for measurements of time.<br>Passing in a regular <b><code>number</code></b> or <b><code>integer</code></b> will cause an error.</aside>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside>
</p>

<p><h3 id='scriptedobstacle-teleport'>ScriptedObstacle : teleport()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span>     <span class="p">;</span><span class="c1">-- example scripted_obstacle </span>
<span class="kd">local</span> <span class="n">dest_tile</span>     <span class="c1">-- tile they want to move to</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started teleporting."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">can_tp</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">teleport</span><span class="p">(</span> <span class="n">dest_tile</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span><span class="p">,</span> <span class="n">on_begin_func</span> <span class="p">)</span>
</code></pre></div>
<p>This function causes the <b><code>ScriptedObstacle</code></b> to move to a target  by teleporting to it.<br></p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:teleport( destination, order, on_begin_func )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>destination</code><br>
    &emsp;<em>The  that you want the <b><code>ScriptedObstacle</code></b> to move to.</em><br>
 <code>order</code><br>
    &emsp;<em>TODO figure out how ActionOrders work again</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong>.</em><br>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">&quot;Started sliding.&quot;</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside></p>
</p>

<p><h3 id='scriptedobstacle-hide'>ScriptedObstacle : hide()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-reveal'>ScriptedObstacle : reveal()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-raw_move_event'>ScriptedObstacle : raw_move_event()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">destination</span>   <span class="c1">-- tile they want to move to</span>

<span class="kd">local</span> <span class="n">move_event</span>    <span class="o">=</span> <span class="n">create_move_event</span><span class="p">()</span>   <span class="c1">-- use this to create a raw move event</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started jumping."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">move_event</span><span class="p">.</span><span class="n">delay_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">30</span> <span class="p">)</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">delta_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">endlag_frames_frames</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">20</span> <span class="p">)</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">dest_tile</span> <span class="o">=</span> <span class="n">destination</span>
<span class="n">move_event</span><span class="p">.</span><span class="n">on_begin_func</span> <span class="o">=</span> <span class="n">on_begin_func</span>

<span class="kd">local</span> <span class="n">can_move</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">raw_move_event</span><span class="p">(</span> <span class="n">move_event</span><span class="p">,</span> <span class="n">ActionOrder</span><span class="p">.</span><span class="n">Voluntary</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet will make the <b><code>ScriptedObstacle</code></b> wait for 30 frames (1/2 second), spend 60 frames (1 second) sliding to the destination tile, and wait for 20 frames (1/3 second) before it can act again.</p>
</blockquote>

<p>This function causes the <b><code>ScriptedObstacle</code></b> to move to a target  in a programmable manner.<br></p>

<p>This function returns <code>true</code> if the movement was possible <em>at the time it was called</em>, otherwise it returns <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:raw_move_event( move_event, order )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>move_event</code><br>
    &emsp;<em>The  object defining how the <b><code>ScriptedObstacle</code></b> will move.</em><br>
 <code>order</code><br>
    &emsp;<em>TODO figure out how ActionOrders work again<br></em><br></p>
<h4 id='moveevent-structure'>MoveEvent structure</h4>
<p><strong><code>frame_time_t</code></strong> <code>delay_frames</code><br>
    &emsp;<em>The amount of time you want the <b><code>ScriptedObstacle</code></b> to wait <strong>before</strong> starting the movement.</em><br>
<strong><code>frame_time_t</code></strong> <code>delta_frames</code><br>
    &emsp;<em>The <em>amount of time</em> you want the movement to take.</em><br>
<strong><code>frame_time_t</code></strong> <code>endlag_frames_frames</code><br>
    &emsp;<em>The <em>amount of time</em> <strong>after</strong> the movement you want the <b><code>ScriptedObstacle</code></b> to stop acting for.</em><br>
<strong><code>number</code></strong> <code>height</code><br>
    &emsp;<em>The height <em>(TODO units?)</em> that you want them to reach at the apex of their jump.</em><br>
 <code>dest_tile</code><br>
    &emsp;<em>The  that you want the <b><code>ScriptedObstacle</code></b> to move to.</em><br>
<strong><code>function</code></strong> <code>on_begin_func</code><br>
    &emsp;<em><code>nil</code>, or a <strong><code>function</code></strong> that you want to execute <strong>when the movement starts</strong>.</em><br>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">frame_time</span> <span class="o">=</span> <span class="n">frames</span><span class="p">(</span> <span class="mi">60</span> <span class="p">)</span>
</code></pre></div>
<aside class="notice">Use the <code>frames()</code> function to create a <b><code>frame_time_t</code></b> object for measurements of time.<br>Passing in a regular <b><code>number</code></b> or <b><code>integer</code></b> will cause an error.</aside></p>

<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">on_begin_func</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Started sliding."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>

<aside class="notice"><code>on_begin_func</code> requires <b>no</b> parameters, and return <b>no value</b>.<br>
See the code snippet for an example.</aside>
</p>

<p><h3 id='scriptedobstacle-will_remove_eof'>ScriptedObstacle : will_remove_eof()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">will_remove</span> <span class="o">=</span>     <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">will_remove_eof</span><span class="p">()</span>
</code></pre></div>
<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> will be removed at the end of the frame.<br>
Returns <code>true</code> if they will be deleted, otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:will_remove_eof()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-get_team'>ScriptedObstacle : get_team()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_team</span> <span class="o">=</span>  <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_team</span><span class="p">()</span>
</code></pre></div>
<p>Returns the  that this <b><code>ScriptedObstacle</code></b> is a member of.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_team()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='scriptedobstacle-get_texture'>ScriptedObstacle : get_texture()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-set_texture'>ScriptedObstacle : set_texture()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-set_height'>ScriptedObstacle : set_height()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-get_animation'>ScriptedObstacle : get_animation()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-set_position'>ScriptedObstacle : set_position()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-get_element'>ScriptedObstacle : get_element()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_element</span> <span class="o">=</span>   <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_element</span><span class="p">()</span>
</code></pre></div>
<p>Returns the  that this <b><code>ScriptedObstacle</code></b> is aligned to. (Default: <code>Element.None</code>)</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_element()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='scriptedobstacle-set_element'>ScriptedObstacle : set_element()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">set_element</span><span class="p">(</span> <span class="n">Element</span><span class="p">.</span><span class="n">None</span> <span class="p">)</span>
</code></pre></div>
<p>Changes the  that this <b><code>ScriptedObstacle</code></b> is aligned to.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:set_element( element )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><code>element</code><br>
    &emsp;<em>The  you want to assign to this <b><code>ScriptedObstacle</code></b>.</em></p>
</p>

<p><h3 id='scriptedobstacle-is_passthrough'>ScriptedObstacle : is_passthrough()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">is_scripted_obstacle_passthrough</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_passthrough</span><span class="p">()</span>
</code></pre></div>
<p>TODO: Figure out what this does</p>
</p>

<p><h3 id='scriptedobstacle-register_component'>ScriptedObstacle : register_component()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-remove'>ScriptedObstacle : remove()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">remove</span><span class="p">()</span>
</code></pre></div>
<p>Flags this <b><code>ScriptedObstacle</code></b> to be removed at the end of the frame.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:remove()</code></p>
</p>

<p><h3 id='scriptedobstacle-delete'>ScriptedObstacle : delete()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">delete</span><span class="p">()</span>
</code></pre></div>
<p>Immediately marks this <b><code>ScriptedObstacle</code></b> as deleted, and calls its <code>delete_func</code> function (if any was defined).</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:delete()</code></p>
</p>

<p><h3 id='scriptedobstacle-get_name'>ScriptedObstacle : get_name()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_name</span> <span class="o">=</span>  <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_name</span><span class="p">()</span>
</code></pre></div>
<p>Returns the name of this <b><code>ScriptedObstacle</code></b>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_name()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>string</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-is_team'>ScriptedObstacle : is_team()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">is_red_team</span> <span class="o">=</span>     <span class="p">;</span><span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">is_team</span><span class="p">(</span> <span class="n">Team</span><span class="p">.</span><span class="n">Red</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet returns <code>true</code> if the <b><code>ScriptedObstacle</code></b> is a part of the <b>Red</b> team, otherwise <code>false</code>.</p>
</blockquote>

<p>Queries whether or not this <b><code>ScriptedObstacle</code></b> is a member of the provided .<br>
Returns <code>true</code> if they are a member of the provided , otherwise <code>false</code>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:is_team( team_to_check )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>boolean</code></strong></p>
<h4 id='parameters'>Parameters</h4>
<p><code>team_to_check</code><br>
    &emsp;<em>The  you want to check this <b><code>ScriptedObstacle</code></b> against.</em></p>
</p>

<p><h3 id='scriptedobstacle-get_health'>ScriptedObstacle : get_health()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_health</span> <span class="o">=</span>    <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_health</span><span class="p">()</span>
</code></pre></div>
<p>Returns the <em>current health</em> for this <b><code>ScriptedObstacle</code></b>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_health()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>integer</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-get_max_health'>ScriptedObstacle : get_max_health()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">scripted_obstacle_max_health</span> <span class="o">=</span>    <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_max_health</span><span class="p">()</span>
</code></pre></div>
<p>Returns the <em>maximum health</em> for this <b><code>ScriptedObstacle</code></b>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_max_health()</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>integer</code></strong></p>
</p>

<p><h3 id='scriptedobstacle-add_node'>ScriptedObstacle : add_node()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-set_name'>ScriptedObstacle : set_name()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">set_name</span><span class="p">(</span> <span class="s2">"Example&lt;b&gt;&lt;code&gt;ScriptedObstacle&lt;/code&gt;&lt;/b&gt;"</span> <span class="p">)</span>
</code></pre></div>
<p>Changes the name of this <b><code>ScriptedObstacle</code></b>.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:set_name( name )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>string</code></strong> <code>name</code><br>
    &emsp;<em>The <em>name</em> you want to assign to this <b><code>ScriptedObstacle</code></b>.</em></p>
</p>

<p><h3 id='scriptedobstacle-update_func'>ScriptedObstacle . update_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">number_prints</span> <span class="o">=</span> <span class="mi">0</span>

<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_update</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">time</span> <span class="p">)</span>
  <span class="n">number_prints</span> <span class="o">=</span> <span class="n">number_prints</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="nb">print</span><span class="p">(</span> <span class="n">number_prints</span> <span class="p">)</span>
<span class="k">end</span>

<span class="kd">local</span> <span class="n">scripted_obstacle</span><span class="p">.</span><span class="n">update_func</span> <span class="o">=</span> <span class="n">on_update</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed every frame that this <b><code>ScriptedObstacle</code></b> is alive for.</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>scripted_obstacle.update_func = on_update</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_update</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>ScriptedObstacle</code></b> to execute every frame.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">update_func</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">elapsed_time</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>update_func</code> requires <b>one</b> <b><code>ScriptedObstacle</code></b> parameter, <b>one</b> <b><code>number</code></b> parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.<br>
The <code>number</code> parameter is the <i>elapsed time</i> since the last time <code>update_func</code> was called for this <b><code>ScriptedObstacle</code></b>.</aside>
</p>

<p><h3 id='scriptedobstacle-set_health'>ScriptedObstacle : set_health()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">set_health</span><span class="p">(</span> <span class="mi">100</span> <span class="p">)</span>
</code></pre></div>
<p>Sets the <em>current health</em> for this <b><code>ScriptedObstacle</code></b> to a specific value.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:set_health( health )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>integer</code></strong> <code>health</code><br>
    &emsp;<em>The <strong>new</strong> value you want to set this <b><code>ScriptedObstacle</code></b>&#39;s health to.</em></p>
</p>

<p><h3 id='scriptedobstacle-get_position'>ScriptedObstacle : get_position()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-set_animation'>ScriptedObstacle : set_animation()</h3>
<p>TODO</p>
</p>

<p><h3 id='scriptedobstacle-delete_func'>ScriptedObstacle . delete_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_delete</span><span class="p">(</span> <span class="n">self</span> <span class="p">)</span>
  <span class="nb">print</span><span class="p">(</span> <span class="s2">"I've been deleted!"</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">scripted_obstacle</span><span class="p">.</span><span class="n">delete_func</span> <span class="o">=</span> <span class="n">on_delete</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>ScriptedObstacle</code></b> is deleted.</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>scripted_obstacle.delete_func = on_delete</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_delete</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>ScriptedObstacle</code></b> to execute when it is deleted.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">delete_func</span><span class="p">(</span> <span class="n">self</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>delete_func</code> requires <b>one</b> <b><code>ScriptedObstacle</code></b> parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.</aside>
</p>

<p><h3 id='scriptedobstacle-can_move_to_func'>ScriptedObstacle . can_move_to_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">move_check</span><span class="p">()</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">self</span><span class="p">:</span><span class="n">get_team</span><span class="p">()</span> <span class="o">==</span> <span class="n">tile</span><span class="p">:</span><span class="n">get_team</span><span class="p">()</span> <span class="p">)</span>
    <span class="k">return</span> <span class="kc">true</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="kc">false</span>
<span class="k">end</span>

<span class="n">scripted_obstacle</span><span class="p">.</span><span class="n">can_move_to_func</span> <span class="o">=</span> <span class="n">move_check</span>
</code></pre></div>
<blockquote>
<p>The above function allows the <b><code>ScriptedObstacle</code></b> to move onto any  that is owned by its .</p>
</blockquote>

<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>ScriptedObstacle</code></b> attempts to move to another .</p>

<p>If the <strong><code>function</code></strong> returns <code>true</code> for a target , the <b><code>ScriptedObstacle</code></b> is able to move to the .<br>
Otherwise, the <b><code>ScriptedObstacle</code></b> is <em>not</em> able to move onto that .</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>scripted_obstacle.can_move_to_func = move_check</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>move_check</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>ScriptedObstacle</code></b> to execute when trying to move.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">can_move_to_func</span><span class="p">(</span> <span class="n">tile</span> <span class="p">)</span>
  <span class="k">return</span> <span class="kc">true</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>can_move_to_func</code> requires <b>one</b> <b><code>ScriptedObstacle</code></b> parameter, and to return a <b><code>boolean</code></b>.<br>
The <code>tile</code> parameter will be passed a reference to the  it is trying to move to.</aside>
</p>

<p><h3 id='scriptedobstacle-share_tile'>ScriptedObstacle : share_tile()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">share_tile</span><span class="p">()</span>
</code></pre></div>
<p>Allows the <b><code>ScriptedObstacle</code></b> to share a  with other objects.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:share_tile( should_share )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>boolean</code></strong> <code>should_share</code><br>
    &emsp;<em><code>true</code> if this <b><code>ScriptedObstacle</code></b> should be able to stand in a  with other  objects.</em><br>
    &emsp;<em>Otherwise <code>false</code>.</em></p>
</p>

<p><h3 id='scriptedobstacle-on_spawn_func'>ScriptedObstacle . on_spawn_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_spawn</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">spawn_tile</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">scripted_obstacle</span><span class="p">.</span><span class="n">on_spawn_func</span> <span class="o">=</span> <span class="n">on_spawn</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>ScriptedObstacle</code></b> is spawned into the game field.</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>scripted_obstacle.on_spawn_func = on_spawn</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_spawn</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>ScriptedObstacle</code></b> to execute when it is first spawned.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">on_spawn_func</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">spawn_tile</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>on_spawn_func</code> requires <b>one</b> <b><code>ScriptedObstacle</code></b> parameter, <b>one</b>  parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.<br>
The <code>spawn_tile</code> parameter will be passed a reference to the  it spawns on.</aside>
</p>

<p><h3 id='scriptedobstacle-add_defense_rule'>ScriptedObstacle : add_defense_rule()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">defense_rule</span>  <span class="p">;</span>   <span class="c1">-- example DefenseRule</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">add_defense_rule</span><span class="p">(</span> <span class="n">defense_rule</span> <span class="p">)</span>
</code></pre></div>
<p>TODO : Figure out how precisely DefenseRule works again</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:add_defense_rule( defense_rule )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><code>defense_rule</code><br>
    &emsp;<em>The  you want to assign to this <b><code>ScriptedObstacle</code></b>.</em></p>
</p>

<p><h3 id='scriptedobstacle-remove_defense_rule'>ScriptedObstacle : remove_defense_rule()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">defense_rule</span>  <span class="p">;</span>   <span class="c1">-- example DefenseRule</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">remove_defense_rule</span><span class="p">(</span> <span class="n">defense_rule</span> <span class="p">)</span>
</code></pre></div>
<p>TODO : Figure out how precisely DefenseRule works again</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:remove_defense_rule( defense_rule )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><code>defense_rule</code><br>
    &emsp;<em>The  you want to remove from this <b><code>ScriptedObstacle</code></b>.</em></p>
</p>

<p><h3 id='scriptedobstacle-never_flip'>ScriptedObstacle : never_flip()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">never_flip</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span>
</code></pre></div><h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:never_flip( should_never_flip )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>boolean</code></strong> <code>should_never_flip</code><br>
    &emsp;<em><code>true</code> if you want this <b><code>ScriptedObstacle</code></b> to always face the same direction. Otherwise, <code>false</code>.</em></p>
</p>

<p><h3 id='scriptedobstacle-shake_camera'>ScriptedObstacle : shake_camera()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">shake_camera</span><span class="p">(</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="p">)</span>
</code></pre></div>
<p>Causes the <b><code>ScriptedObstacle</code></b> to shake the camera, at a specified for a specified time.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:shake_camera( power, duration )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>number</code></strong> <code>power</code><br>
    &emsp;<em>How <strong>pronounced</strong> the shaking should be.</em><br>
<strong><code>number</code></strong> <code>duration</code><br>
    &emsp;<em>The time (<strong>in seconds</strong>) the shaking should last.</em></p>
</p>

<p><h3 id='scriptedobstacle-set_facing'>ScriptedObstacle : set_facing()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">set_facing</span><span class="p">(</span> <span class="n">Direction</span><span class="p">.</span><span class="n">Left</span> <span class="p">)</span>
</code></pre></div>
<p>Forces the <b><code>ScriptedObstacle</code></b> to face a specific .</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:set_facing( direction )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><code>direction</code><br>
    &emsp;<em>The <strong>new</strong>  you want this <b><code>ScriptedObstacle</code></b> to face towards.</em></p>
</p>

<p><h3 id='scriptedobstacle-highlight_tile'>ScriptedObstacle : highlight_tile()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">highlight_tile</span><span class="p">(</span> <span class="n">Highlight</span><span class="p">.</span><span class="n">Flash</span> <span class="p">)</span>
</code></pre></div>
<p>TODO</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:highlight_tile( highlight_mode )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><code>highlight_mode</code><br>
    &emsp;__</p>
</p>

<p><h3 id='scriptedobstacle-set_hit_props'>ScriptedObstacle : set_hit_props()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">hit_props</span> <span class="p">;</span><span class="c1">-- example HitProps</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">set_hit_props</span><span class="p">(</span> <span class="n">hit_props</span> <span class="p">)</span>
</code></pre></div>
<p>TODO</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:set_hit_props( hit_props )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><code>hit_props</code><br>
    &emsp;__</p>
</p>

<p><h3 id='scriptedobstacle-show_shadow'>ScriptedObstacle : show_shadow()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">show_shadow</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span>
</code></pre></div>
<p>If <code>true</code>, causes the <b><code>ScriptedObstacle</code></b> to draw a shadow on the  underneath it.<br>
Otherwise it does <em>not</em> draw a shadow underneath it.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:show_shadow( draw_shadow )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>boolean</code></strong> <code>draw_shadow</code><br>
    &emsp;<em><code>true</code> if this <b><code>ScriptedObstacle</code></b> should have a shadow underneath it. Otherwise <code>false</code>.</em></p>
</p>

<p><h3 id='scriptedobstacle-attack_func'>ScriptedObstacle . attack_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_attack</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">target</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">scripted_obstacle</span><span class="p">.</span><span class="n">attack_func</span> <span class="o">=</span> <span class="n">on_attack</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>ScriptedObstacle</code></b> <strong>damages</strong> another .</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>scripted_obstacle.attack_func = on_attack</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_attack</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>ScriptedObstacle</code></b> to execute when it successfully this a .</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">attack_func</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">hit_character</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>attack_func</code> requires <b>one</b> <b><code>ScriptedObstacle</code></b> parameter, <b>one</b>  parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.<br>
The <code>hit_character</code> parameter will be passed a reference to the  it hit.</aside>
</p>

<p><h3 id='scriptedobstacle-collision_func'>ScriptedObstacle . collision_func</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">on_collide</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">collided_with</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">scripted_obstacle</span><span class="p">.</span><span class="n">collision_func</span> <span class="o">=</span> <span class="n">on_collide</span>
</code></pre></div>
<p>Assigns a <strong><code>function</code></strong> that will be executed when this <b><code>ScriptedObstacle</code></b> <strong>collides with</strong> another .</p>
<h4 id='variable-type'>Variable Type</h4>
<p><strong><code>function</code></strong></p>
<h4 id='assignment'>Assignment</h4>
<p><code>scripted_obstacle.collision_func = on_collide</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>function</code></strong> <code>on_collide</code><br>
    &emsp;<em>The <strong><code>function</code></strong> you want this <b><code>ScriptedObstacle</code></b> to execute when it collides with a .</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="k">function</span> <span class="nf">collision_func</span><span class="p">(</span> <span class="n">self</span><span class="p">,</span> <span class="n">collided_with</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>collision_func</code> requires <b>one</b> <b><code>ScriptedObstacle</code></b> parameter, <b>one</b>  parameter, and to return <b>nothing</b>.<br>
The <code>self</code> parameter will be passed a reference to itself.<br>
The <code>collided_with</code> parameter will be passed a reference to the  it collided with.</aside>
</p>

<p><h3 id='scriptedobstacle-get_hit_props'>ScriptedObstacle : get_hit_props()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="kd">local</span> <span class="n">hit_props_copy</span> <span class="o">=</span> <span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">get_hit_props</span><span class="p">()</span>
</code></pre></div>
<p>Returns a shallow copy of the <b><code>ScriptedObstacle</code></b>&#39;s .</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_hit_props()</code></p>
<h4 id='return-value'>Return Value</h4></p>
<p><h3 id='scriptedobstacle-ignore_common_aggressor'>ScriptedObstacle : ignore_common_aggressor()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">scripted_obstacle</span> <span class="p">;</span><span class="c1">-- example scripted_obstacle</span>
<span class="n">scripted_obstacle</span><span class="p">:</span><span class="n">ignore_common_aggressor</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span>
</code></pre></div>
<p>TODO<br>
If <code>true</code>, causes this <b><code>ScriptedObstacle</code></b> to ignore other attacks and effects that are spawned by the  that spawned <em>this</em> object.<br>
Otherwise, it will be affected by other attacks and effects from its parent .</p>
<h4 id='function-call'>Function Call</h4>
<p><code>scripted_obstacle:get_hit_props( should_ignore )</code></p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>boolean</code></strong> <code>should_ignore</code><br>
    &emsp;<em><code>true</code> if this should ignore other effects from the same source.</em><br>
    &emsp;<em>Otherwise <code>false</code>.</em></p>
</p>
