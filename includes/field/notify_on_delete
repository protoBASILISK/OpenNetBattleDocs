<h3 id='field-notify_on_delete'>Field : notify_on_delete()</h3><div class="highlight"><pre class="highlight lua tab-lua"><code><span class="kd">local</span> <span class="n">target</span>    <span class="c1">-- Example target entity</span>
<span class="kd">local</span> <span class="n">observer</span>  <span class="c1">-- Example observing entity</span>
<span class="k">function</span> <span class="nf">onDelete</span><span class="p">(</span> <span class="n">tar</span><span class="p">,</span> <span class="n">obs</span> <span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Observer saw Target die."</span> <span class="p">)</span>
<span class="k">end</span>

<span class="n">field</span><span class="p">:</span><span class="n">notify_on_delete</span><span class="p">(</span> <span class="n">target</span><span class="p">,</span> <span class="n">observer</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span> <span class="n">t</span><span class="p">,</span> <span class="n">e</span> <span class="p">)</span> <span class="nb">print</span><span class="p">(</span> <span class="s2">"Observer saw Target die."</span> <span class="p">)</span> <span class="k">end</span> <span class="p">)</span>
<span class="n">field</span><span class="p">:</span><span class="n">notify_on_delete</span><span class="p">(</span> <span class="n">target</span><span class="p">,</span> <span class="n">observer</span><span class="p">,</span> <span class="n">onDelete</span> <span class="p">)</span>
</code></pre></div>
<blockquote>
<p>The above snippet sets up a notification callback in two separate ways.<br>
You can use it in either way with little differences, except when wanting to use more advanced techniques.</p>
</blockquote>

<p>This function sets up a <strong><code>callback function</code></strong> that will be executed when the <code>target</code>  is destroyed.<br>
If the <code>observer</code>  is destroyed <em>first</em>, the <strong><code>function</code></strong> will <em>not</em> execute.</p>

<p>This can be used in many cases e.g. where a <em>parent</em> (<code>target</code>)  wants another  it spawns (as <code>observer</code>) to be deleted along with it.</p>
<h4 id='function-call'>Function Call</h4>
<p><code>field:notify_on_delete( targetID, observerID, callback_function )</code></p>
<h4 id='return-value'>Return Value</h4>
<p><strong><code>NotifyID_t</code></strong> - ???</p>
<h4 id='parameters'>Parameters</h4>
<p><strong><code>number</code></strong> <code>targetID</code><br>
    &emsp;<em>The <strong>unique ID</strong> of the  you are watching.</em><br>
<strong><code>number</code></strong> <code>observerID</code><br>
    &emsp;<em>The <strong>unique ID</strong> of the  that will be notified when an  with the ID <code>targetID</code> is deleted.</em><br>
<strong><code>function</code></strong> <code>callback_function</code><br>
    &emsp;<em>This is the <strong><code>function</code></strong> that will be called when an  with the ID <code>targetID</code> is deleted.</em><br></p>
<div class="highlight"><pre class="highlight lua tab-lua"><code><span class="k">function</span> <span class="nf">callback_function</span><span class="p">(</span> <span class="n">target</span><span class="p">,</span> <span class="n">observer</span> <span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span> <span class="s2">"Target died."</span> <span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<aside class="notice"><code>callback_function</code> requrires <b>two</b>  parameters, and to <b>no value</b>.<br>
See the code snippet for an example.</aside>
